
@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "SearchIndex";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
@{
    //var searchBy = Model.SearchBy;
    //var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var sortDir = Model.SortDirection;
    var id = Model.PageNumber;
    var searchDict = Model.SearchDictionary;

    List<String> categories = new List<String>() { "EmailAddress", "TimeStamp", "WebRequestID", "Message", "MethodName", "Source", "StackTrace", "Important" };

    bool noResults = (Model.TotalItems) == 0;
}

<!-- Paging stuff -->
<div class="container" style="padding-top: 60px !important;">
    <div class="row">
        <div class="col-md-4">
            <label class="pageLabel"> Current page: @Model.PageNumber / @Model.TotalPages</label>
        </div>
        <div class="col-md-4">
            <div class="btn-group">
                <input type="button" class="btn btn-default" onclick="updateButton(1, '@sortBy', '@sortDir')" value="<< First">

                <input type="button" class="btn btn-default" onclick="updateButton(((@id - 1) != 0) ? (@id - 1) : @id, '@sortBy', '@sortDir')" value="< Previous">

                <input type="button" class="btn btn-default" onClick="updateButton(((@id + 1) <= @Model.TotalPages) ? (@id + 1) : @id, '@sortBy', '@sortDir')" value="Next >">

                <input type="button" class="btn btn-default" onclick="updateButton(@Model.TotalPages, '@sortBy', '@sortDir')" value="Last >>">
            </div>
        </div>
        <div class="col-md-2">
            @Html.ActionLink("Back to table", "Index")
        </div>
        <div class="col-md-2">
            @Html.ActionLink("New search", "AdvancedSearch")
        </div>
    </div>
</div>

@if (!noResults)
{
    <table style="width:100%; text-align:center;">
        <thead>
            <tr>
                @foreach (String category in categories)
                {
                    var sortB = "";
                    var sortD = "";
                    var className = "sortLink";

                    if (sortBy == category)
                    {
                        sortB = sortBy;
                        className = "selectedSortLink";<!-- If sortBy == the category name, make the link underlined -->

                        if (sortDir == "ASC")
                        { sortD = "DESC"; }
                        else
                        { sortD = "ASC"; }
                    }
                    else
                    {
                        sortB = category;
                        sortD = "ASC";
                    }
                <td>
                    @*Html.ActionLink(category, "SearchIndex", new { sortBy = sortB, sortDir = sortD, searchBy = searchBy, searchInput = searchInput, id = 1 }, new { @class = className }) *@
                    <input type="button" id="sortButton" value="@category" onclick="updateButton(1, '@sortB', '@sortD')" class="@className" />
                </td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
            {
            <tr>
                <td>@currentRow.EmailAddress</td>
                <td>@currentRow.TimeStamp</td>
                <td>@currentRow.WebRequestID</td>
                <td>@currentRow.Message</td>
                <td>@currentRow.MethodName</td>
                <td>@currentRow.Source</td>
                <td>@currentRow.StackTrace</td>
                <td>
                    <!-- If !Important, show the unfilled icon and have it open the modal/toggle the icon -->
                    <!-- If Important, show the filled icon and have it markUnimportant/toggle the icon -->
                    @if (currentRow.Important == null)
                    {
                        //string fixedMessage = currentRow.Message.ToString().Replace("'", "\\'");
                        <img src="~/Content/unfilledStar.jpg" class="unfilledIcon" onclick="openModal('@currentRow.UserID.ToString()', '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()', '@currentRow.WebRequestID.ToString()', '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()')" />
                    }
                    else
                    {
                        //string fixedMessage = currentRow.Message.ToString().Replace("'", "\\'");
                        <img src="~/Content/filledStar.jpg" class="filledIcon" onclick="markUnimportant('@currentRow.UserID.ToString()', '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()', '@currentRow.WebRequestID.ToString()', '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()')" />
                    }
                </td>
            </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}


<div class="reveal" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
    <form id="usernameForm">
        Your Email: <input type="text" name="usernameEntry" />
        <button onclick="UpdateImportance()">Update</button>
    </form>
    <button onclick="closeModal()">Cancel</button>
</div>


<script>
    var exampleModal;
    var exampleModalVisible = false;

    var currentUserID = null;
    var currentEmailAddress = null;
    var currentTimeStamp = null;
    var currentWebRequestID = null;
    var currentMethodName = null;
    var currentSource = null;

    var currentid = null;
    var currentsortBy = null;
    var currentsortDir = null;
    var currentsearchDictionary = @Html.Raw(Json.Encode(searchDict))
    //var currentModel = Model;

    function openModal(UserID, EmailAddress, TimeStamp, WebRequestID, MethodName, Source) {
        event.preventDefault;
        debugger;
        currentUserID = UserID;
        currentEmailAddress = EmailAddress;
        currentTimeStamp = TimeStamp;
        currentWebRequestID = WebRequestID;
        currentMethodName = MethodName;
        currentSource = Source;

        exampleModal.open();
    };

    $(document).ready(function () {
        exampleModal = new Foundation.Reveal($("#example-modal"));

        $("#example-modal").on("open.zf.reveal", function () {
            exampleModalVisible = true;
        });

        $("#example-modal").on("closed.zf.reveal", function () {
            exampleModalVisible = false;
        });
    });

    function updateButton(page, sortB, sortD) {
        currentid = page;
        currentsortBy = sortB;
        currentsortDir = sortD;
        debugger;

        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/LogException/SearchIndex';

        var dictionary = {};
        var index = 0;

        for (var key in currentsearchDictionary) {
            if (currentsearchDictionary.hasOwnProperty(key)) {
                dictionary["searchDictionary[" + index + "].Key"] = key;
                dictionary["searchDictionary[" + index + "].Value"] = currentsearchDictionary[key];
            }
            index = index + 1;
        }
        for (var key in dictionary) {
            const hiddenField = document.createElement('input');
            hiddenField.hidden = true;
            hiddenField.name = key;
            hiddenField.value = dictionary[key];
            form.appendChild(hiddenField);
        }

        const id = document.createElement('input');
        id.hidden = true;
        id.name = 'id';
        id.value = currentid;
        form.appendChild(id);

        const sortBy = document.createElement('input');
        sortBy.hidden = true;
        sortBy.name = 'sortBy';
        sortBy.value = currentsortBy;
        form.appendChild(sortBy);

        const sortDir = document.createElement('input');
        sortDir.hidden = true;
        sortDir.name = 'sortDir';
        sortDir.value = currentsortDir;
        form.appendChild(sortDir);

        document.body.appendChild(form);
        form.submit();
    };



    function closeModal() {
        event.preventDefault;

        currentUserID = null;
        currentEmailAddress = null;
        currentTimeStamp = null;
        currentWebRequestID = null;
        currentMethodName = null;
        currentSource = null;

        exampleModal.close();
    };



    function UpdateImportance() {
        debugger;
        usernameValue = $("[name=usernameEntry]").val();

        /* var currentid = Model.PageNumber;
        var currentsortBy = 'Model.SortBy';
        var currentsortDir = 'Model.SortDirection';
        var dictionary = {};
        var index = 0;
        */

        for (var key in currentsearchDictionary) {
            if (currentsearchDictionary.hasOwnProperty(key)) {
                dictionary["searchDictionary[" + index + "].Key"] = key;
                dictionary["searchDictionary[" + index + "].Value"] = currentsearchDictionary[key];
            }
            index = index + 1;
        } 

        var log = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            MethodName: currentMethodName,
            Source: currentSource,
        };

        //maybe use a form instead of ajax? 

        /*
        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/LogException/UpdateImportance';

        for (var key in dictionary) {
            const hiddenField = document.createElement('input');
            hiddenField.hidden = true;
            hiddenField.name = key;
            hiddenField.value = dictionary[key];
            form.appendChild(hiddenField);
        }

        const id = document.createElement('input');
        id.hidden = true;
        id.name = 'id';
        id.value = currentid;
        form.appendChild(id);

        const sortBy = document.createElement('input');
        sortBy.hidden = true;
        sortBy.name = 'sortBy';
        sortBy.value = currentsortBy;
        form.appendChild(sortBy);

        const sortDir = document.createElement('input');
        sortDir.hidden = true;
        sortDir.name = 'sortDir';
        sortDir.value = currentsortDir;
        form.appendChild(sortDir);

        //append log
        //var model = {};
        for (var item in log) {
            const hiddenField = document.createElement('input');
            hiddenField.type = 'hidden';
            hiddenField.name = item;
            hiddenField.value = log[item];
            form.appendChild(hiddenField);
        }


        document.body.appendChild(form);
        form.submit();
        */
        
        $.ajax({
            method: "POST",
            url: "@Url.Action("UpdateImportance", "LogException")",
            dataType: "json",
            //dataType: "html",
            data: {
                username: usernameValue,
                logToUpdate: log,
                //modelToUpdate: JSON.stringify(model),
                //id: id,
                //sortBy: sortBy,
                //sortDir: sortDirection,
                //searchDict: dictionary,
		    },

            success: function (result) {
                document.getElementById("usernameForm").reset();

                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMethodName = null;
                currentSource = null;

                if (result.IsCreated) {
                    //window.location.reload();
                    updateSuccess();
                }
                else {
                    alert(result.ErrorMessage);
                }

            },

            error: function (result) {
                //alert(result.ErrorMessage);
                alert(result);
            }
        }); 
    };

    function updateSuccess() {
        var currentid = @Model.PageNumber;
        var currentsortBy = '@Model.SortBy';
        var currentsortDir = '@Model.SortDirection';
        var dictionary = {};
        var index = 0;
        debugger;
        for (var key in currentsearchDictionary) {
            if (currentsearchDictionary.hasOwnProperty(key)) {
                dictionary["searchDictionary[" + index + "].Key"] = key;
                dictionary["searchDictionary[" + index + "].Value"] = currentsearchDictionary[key];
            }
            index = index + 1;
        }

        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/LogException/SearchIndex';

        for (var key in dictionary) {
            const hiddenField = document.createElement('input');
            hiddenField.hidden = true;
            hiddenField.name = key;
            hiddenField.value = dictionary[key];
            form.appendChild(hiddenField);
        }

        const id = document.createElement('input');
        id.hidden = true;
        id.name = 'id';
        id.value = currentid;
        form.appendChild(id);

        const sortBy = document.createElement('input');
        sortBy.hidden = true;
        sortBy.name = 'sortBy';
        sortBy.value = currentsortBy;
        form.appendChild(sortBy);

        const sortDir = document.createElement('input');
        sortDir.hidden = true;
        sortDir.name = 'sortDir';
        sortDir.value = currentsortDir;
        form.appendChild(sortDir);


        document.body.appendChild(form);
        form.submit();


        //window.location = 'Url.Action("SearchIndex", "LogException", new {id= currentid, searchDictionary = dict, sortBy =   )'
    }

    function markUnimportant(currentUserID, currentEmailAddress, currentTimeStamp, currentWebRequestID, currentMethodName, currentSource) {
        var model = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            MethodName: currentMethodName,
            Source: currentSource,
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("MarkUnimportant", "LogException")",
            dataType: "json",
            data: {
                logToUpdate: model,
            },

            success: function (result) {
                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMethodName = null;
                currentSource = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    };
</script>

