<body>
    @using AsignioInternship.Data.CombinedLogException
    @using AsignioInternship.Data


    @model PagedDataModelCollection<CombinedLogExceptionDataModel>
    @{
        ViewBag.Title = "Index";
        Layout = "~/Views/Shared/_Layout.cshtml";
    }
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
    @{
        var searchBy = Model.SearchBy;
        var searchInput = Model.SearchInput;
        var sortBy = Model.SortBy;
        var id = Model.PageNumber;

        bool noResults = (Model.TotalItems) == 0;
        //int currRow = 0;

        List<SelectListItem> listItems = new List<SelectListItem>();
        listItems.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
        listItems.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
        listItems.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });

        List<SelectListItem> searchCategories = new List<SelectListItem>();
        searchCategories.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
        searchCategories.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
        searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
        searchCategories.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
        searchCategories.Add(new SelectListItem { Text = "Source", Value = "Source" });
        searchCategories.Add(new SelectListItem { Text = "Stack Trace", Value = "StackTrace" });
    }



    @using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }))
    {
        <div class="container">
            <div class="block" style="width: 20% !important; display: inline;">
                @Html.Label("Sort by: ")
                @Html.DropDownList("sortBy", listItems)
            </div>
            <div class="block" style="width: 20% !important; display: inline;">
                @Html.Label("Search by: ")
                @Html.DropDownList("searchBy", searchCategories)
            </div>
            <div class="block" style="width: 20% !important; display: inline;">
                @Html.Label("*Search for: ")
                @Html.TextBox("searchInput")
            </div>
            <div class="block" style="width: 20% !important; display: inline;">
                @Html.Label("Page: ")
                @Html.TextBox("id")
            </div>
            <input type="submit" name="btnSubmit" value="Go" class="btn btn-default" style="width: 20% !important; display: inline;" />
        </div>
    }
    *If searching by TimeStamp, make sure the format is YYYY-MM-DD

    <div>
        @Html.ActionLink(linkText: "Previous",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new
                                {
                                    sortBy = sortBy,
                                    searchBy = searchBy,
                                    searchInput = searchInput,
                                    id = ((id - 1) != 0) ? (id - 1) : id
                                },
                            htmlAttributes: null)
    </div>
    <div>
        @Html.ActionLink(linkText: "Next",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new
                                {
                                    sortBy = sortBy,
                                    searchBy = searchBy,
                                    searchInput = searchInput,
                                    id = ((id + 1) <= Model.TotalPages) ? (id + 1) : id
                                },
                            htmlAttributes: null)
    </div>

    <div>
        Current Page: @Model.PageNumber/@Model.TotalPages
    </div>

    @if (!noResults)
    {
        <table style="width:100%; text-align:center;">
            <thead>
                <tr>
                    <td>Email Address</td>
                    <td>Time Stamp</td>
                    <td>Web Request ID</td>
                    <td>Message</td>
                    <td>Method Name</td>
                    <td>Source</td>
                    <td>Stack Trace</td>
                    <td>Important</td>
                    <td>Mark as Important</td>
                    <td>Mark as Important - modal</td>
                </tr>
            </thead>
            <tbody>
                @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
                {
                    <tr>
                        <td>@currentRow.EmailAddress</td>
                        <td>@currentRow.TimeStamp</td>
                        <td>@currentRow.WebRequestID</td>
                        <td>@currentRow.Message</td>
                        <td>@currentRow.MethodName</td>
                        <td>@currentRow.Source</td>
                        <td>@currentRow.StackTrace</td>
                        <td>@currentRow.Important</td>
                        <td>@Html.ActionLink("Mark as Important", "MarkAsImportant", currentRow)</td>
                        <td>
                            <button class="openModalButton" onclick="openModal('@currentRow.UserID.ToString()', '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()', '@currentRow.WebRequestID.ToString()', '@currentRow.Message.ToString()', '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()', '@currentRow.StackTrace.ToString()')">
                                Click me to mark as important
                            </button>

                        </td>
                    </tr>
                    //currRow++;
                }
            </tbody>
        </table>
    }
    else
    {
        <h2> No results found. </h2>
    }

    <div class="reveal" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
        This is where a user will enter their email address

        <form id="usernameForm">
            Your Email: <input type="text" name="usernameEntry" />
            <button onclick="UpdateImportance()">Update</button>
        </form>

        <button onclick="closeModal()">Cancel</button>
    </div>
</body>



@section scripts
{
    <script language="javascript" type="text/javascript">

        var exampleModal;
        var exampleModalVisible = false;

        var currentUserID = null;
        var currentEmailAddress = null;
        var currentTimeStamp = null;
        var currentWebRequestID = null;
        var currentMessage = null;
        var currentMethodName = null;
        var currentSource = null;
        var currentStackTrace = null;


        function openModal(UserID, EmailAddress, TimeStamp, WebRequestID, Message, MethodName, Source, StackTrace) {        
            event.preventDefault;

            debugger;
            // These are global so we'll be able to call them in UpdateImportance()
            currentUserID = UserID;
            currentEmailAddress = EmailAddress;
            currentTimeStamp = TimeStamp;
            currentWebRequestID = WebRequestID;
            currentMessage = Message;
            currentMethodName = MethodName;
            currentSource = Source;
            currentStackTrace = StackTrace;

            exampleModal.open();
        }

        function closeModal() {
            event.preventDefault;

            currentUserID = null;
            currentEmailAddress = null;
            currentTimeStamp = null;
            currentWebRequestID = null;
            currentMessage = null;
            currentMethodName = null;
            currentSource = null;
            currentStackTrace = null;

            exampleModal.close();
        }

        $(document).ready(function () {

            exampleModal = new Foundation.Reveal($("#example-modal"));

            $("#example-modal").on("open.zf.reveal", function () {
                exampleModalVisible = true;
            });

            $("#example-modal").on("closed.zf.reveal", function () {
                exampleModalVisible = false;
            });
        });

        function UpdateImportance() {
            debugger;
            usernameValue = $("[name=usernameEntry]").val();
            alert(usernameValue); // leaving this and the debugger in for testing for now
            //usernameValue = document.getElementById('usernameEntry');

            var model = {
                UserID: currentUserID,
                EmailAddress: currentEmailAddress,
                TimeStamp: currentTimeStamp,
                WebRequestID: currentWebRequestID,
                Message: currentMessage,
                MethodName: currentMethodName,
                Source: currentSource,
                StackTrace: currentStackTrace
            };

            $.ajax({
                method: "POST",
                url: "@Url.Action("UpdateImportance", "LogException")",
                dataType: "json",
                data: {
                    username: usernameValue,
                    //logToUpdate: JSON.stringify(model),
                    logToUpdate: model,
		        },

                success: function (result) {
                    document.getElementById("usernameForm").reset();

                    currentUserID = null;
                    currentEmailAddress = null;
                    currentTimeStamp = null;
                    currentWebRequestID = null;
                    currentMessage = null;
                    currentMethodName = null;
                    currentSource = null;
                    currentStackTrace = null;
                } 
            });
        };

    </script>
}
