@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var searchBy = Model.SearchBy;
    var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var id = Model.PageNumber;

    bool noResults = (Model.TotalItems) == 0;

    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
    listItems.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    listItems.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });

    List<SelectListItem> searchCategories = new List<SelectListItem>();
    searchCategories.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
    searchCategories.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
    searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
    searchCategories.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    searchCategories.Add(new SelectListItem { Text = "Source", Value = "Source" });
    searchCategories.Add(new SelectListItem { Text = "Stack Trace", Value = "StackTrace" });
}

@using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }))
{
    <div class="container">
        <div class="block" style="width: 20% !important; display: inline;">
            @Html.Label("Sort by: ")
            @Html.DropDownList("sortBy", listItems)
        </div>
        <div class="block" style="width: 20% !important; display: inline;">
            @Html.Label("Search by: ")
            @Html.DropDownList("searchBy", searchCategories)
        </div>
        <div class="block" style="width: 20% !important; display: inline;">
            @Html.Label("*Search for: ")
            @Html.TextBox("searchInput")
        </div>
        <div class="block" style="width: 20% !important; display: inline;">
            @Html.Label("Page: ")
            @Html.TextBox("id")
        </div>
        <input type="submit" name="btnSubmit" value="Go" class="btn btn-default" style="width: 20% !important; display: inline;" />
    </div>
}
*If searching by TimeStamp, make sure the format is YYYY-MM-DD

<div>
    @Html.ActionLink(linkText: "Previous",
                        actionName: "Index",
                        controllerName: "LogException",
                        routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput,
                                                                    id = ((id - 1) != 0) ? (id - 1) : id },
                        htmlAttributes: null)
</div>
<div>
    @Html.ActionLink(linkText: "Next",
                        actionName: "Index",
                        controllerName: "LogException",
                        routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput,
                                                        id = ((id + 1) <= Model.TotalPages) ? (id + 1) : id },
                        htmlAttributes: null)
</div>

<div>
    Current Page: @Model.PageNumber/@Model.TotalPages
</div>

@if (!noResults)
{
    <table style="width:100%; text-align:center;">
        <thead>
            <tr>
                <td>Email Address</td>
                <td>Time Stamp</td>
                <td>Web Request ID</td>
                <td>Message</td>
                <td>Method Name</td>
                <td>Source</td>
                <td>Stack Trace</td>
                <td>Important</td>
                <td>Mark as Important</td>
                <td>Mark as Important - modal</td>
            </tr>
        </thead>
        <tbody>
            @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
            {
                <tr>
                    <td>@currentRow.EmailAddress</td>
                    <td>@currentRow.TimeStamp</td>
                    <td>@currentRow.WebRequestID</td>
                    <td>@currentRow.Message</td>
                    <td>@currentRow.MethodName</td>
                    <td>@currentRow.Source</td>
                    <td>@currentRow.StackTrace</td>
                    <td>@currentRow.Important</td>
                    <td>@Html.ActionLink("Mark as Important", "MarkAsImportant", currentRow)</td>
                    <td>
                        <button onclick="openModal()">
                            Click me to mark as important
                        </button>
                        <div class="reveal" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
                            <div>
                                Hello this is an example modal. <br />

                                <button onclick="closeModal()">Cancel</button>
                            </div>
                        </div>
                    </td>


                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}

@section scripts
{
    <script language="javascript" type="text/javascript">

        var exampleModal;
        var exampleModalVisible = false;

        function openModal() {
            event.preventDefault;
            exampleModal.open();
        }

        function closeModal() {
            event.preventDefault;
            exampleModal.close();
        }

        $(document).ready(function () {

            exampleModal = new Foundation.Reveal($("#example-modal"));

            $("#example-modal").on("open.zf.reveal", function () {
                exampleModalVisible = true;
            });

            $("#example-modal").on("closed.zf.reveal", function () {
                exampleModalVisible = false;
            });
        });

    </script>

    <script language="javascript" type="text/javascript">
        function ExampleAjaxButtonFunc() {
            $.ajax({
                method: "POST",
                url: "@Url.Action("DoExampleAjaxFunction", "LogException")", // these two are the function name and controller name from your C#
                dataType: "json",
                data: {
		            exampleVar1: $("[name=exampleVar1Form]").val(), // this is where you assign the variables you're passing in. Here, you'd need an HTML form called "exampleVar1Form" that the user would fill out before hitting the button. Any JavaScript variable passed in will work, so setting var exampleVar1 = 2 and passing that in would work as well, for example.
		            exampleVar2: $("[name=exampleVar2Form]").val(),
		    // you'll do the above assignments for each variable passed into the function (so if the C# function called for exampleVar3 and 4, you'd do the same for them)
		        },
                success: function (result) {

                    // here you'll add more JavaScript that will execute after the Ajax call is done. You could clear all of the form fields back to blank, for example:
		    // document.getElementById("exampleVar2Form").reset();
                }
            });
        }
    </script>

}
