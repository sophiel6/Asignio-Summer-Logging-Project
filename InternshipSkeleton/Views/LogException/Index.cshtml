
@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
@{
    var searchBy = Model.SearchBy;
    var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var id = Model.PageNumber;

    bool noResults = (Model.TotalItems) == 0;

    List<SelectListItem> listItems = new List<SelectListItem>();
    listItems.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
    listItems.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    listItems.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
    listItems.Add(new SelectListItem { Text = "Importance", Value = "Important" });

    List<SelectListItem> searchCategories = new List<SelectListItem>();
    searchCategories.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
    searchCategories.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
    searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
    searchCategories.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    searchCategories.Add(new SelectListItem { Text = "Source", Value = "Source" });
    searchCategories.Add(new SelectListItem { Text = "Stack Trace", Value = "StackTrace" });
    searchCategories.Add(new SelectListItem { Text = "Importance", Value = "Important" });
}
<!-- Search form -->
@using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }))
{
    <div class="container" style="padding-top: 50px !important;">
        @Html.HiddenFor(m => m.SortBy)

        <div class="block" style="width: 25% !important; display: inline-block; ">
            @Html.Label("Search by: ", new { @class = "mylabel" })
            @Html.DropDownList("searchBy", searchCategories, new { @class = "mydropdown" })
        </div>
        <div class="block" style="width: 25% !important; display: inline-block; ">
            @Html.Label("*Search for: ", new { @class = "mylabel" })
            @Html.TextBox("searchInput", null, new { @class = "mytextbox" })
        </div>

        <input type="submit" name="btnSubmit" value="Go" class="btn btn-default" style="width: 50px; display: inline-block;" />
    </div>
}
*If searching by TimeStamp, make sure the format is YYYY-MM-DD

<!-- Sort form -->
@using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }, FormMethod.Post, new { id = "id" }))
{
    @Html.Label("Sort by: ", new { @class = "mylabel" })
    @Html.DropDownList("sortBy", listItems, new { @class = "mydropdown", onchange = "this.form.submit();" })

    @Html.HiddenFor(m => m.SearchBy)
    @Html.HiddenFor(m => m.SearchInput)
}

<!-- Paging stuff -->
<div class="container">
    <div class="text-center">
        <div class="btn-group">
            @Html.ActionLink(linkText: "First",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput, id = 1 },
                            htmlAttributes: new { @class = "btn btn-default" })
            @Html.ActionLink(linkText: "Previous",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput, id = ((id - 1) != 0) ? (id - 1) : id },
                            htmlAttributes: new { @class = "btn btn-default" })
            @Html.ActionLink(linkText: "Next",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput, id = ((id + 1) <= Model.TotalPages) ? (id + 1) : id },
                            htmlAttributes: new { @class = "btn btn-default" })
            @Html.ActionLink(linkText: "Last",
                            actionName: "Index",
                            controllerName: "LogException",
                            routeValues: new { sortBy = sortBy, searchBy = searchBy, searchInput = searchInput, id = Model.TotalPages },
                            htmlAttributes: new { @class = "btn btn-default" })
        </div>
    </div>

    @using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }))
    {
        <div class="block">
            @Html.Label("Page: ", new { @class = "mylabel" })
            @Html.TextBox("id", null, new { @class = "mytextbox" })

            @Html.HiddenFor(m => m.SortBy)
            @Html.HiddenFor(m => m.SearchBy)
            @Html.HiddenFor(m => m.SearchInput)
        </div>
        <input type="submit" name="btnSubmit" value="Jump to page" class="btn btn-default" style=" display: inline-block;" />
    }
</div>

<div>
    Current Page: @Model.PageNumber/@Model.TotalPages
</div>

@if (!noResults)
{
    <table style="width:100%; text-align:center;">
        <thead>
            <tr>
                <td>Email Address</td>
                <td>Time Stamp</td>
                <td>Web Request ID</td>
                <td>Message</td>
                <td>Method Name</td>
                <td>Source</td>
                <td>Stack Trace</td>
                <td>Important</td>
            </tr>
        </thead>
        <tbody>
            @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
            {
            <tr>
                <td>@currentRow.EmailAddress</td>
                <td>@currentRow.TimeStamp</td>
                <td>@currentRow.WebRequestID</td>
                <td>@currentRow.Message</td>
                <td>@currentRow.MethodName</td>
                <td>@currentRow.Source</td>
                <td>@currentRow.StackTrace</td>
                <!-- <td>(at)currentRow.Important</td> -->
                <!-- icon will go here
     button with onClick="openModal()" where openModal contains
     x.classList.toggle("change");
    the css will have settings for the icon and
    .change settings for the icon
    https://www.w3schools.com/howto/howto_css_menu_icon.asp -->
                <td>
                    <!-- If !Important, show the unfilled icon and have it open the modal/toggle the icon -->
                    <!-- If Important, show the filled icon and have it markUnimportant/toggle the icon -->
                    @if (currentRow.Important == null)
                    {
                        <img src="~/Content/unfilledStar.jpg" class="unfilledIcon" onclick="openModal('@currentRow.UserID.ToString()',
                            '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()',
                            '@currentRow.WebRequestID.ToString()', '@currentRow.Message.ToString()',
                            '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()', '@currentRow.StackTrace.ToString()')" />
                    }
                    else
                    {
                        <img src="~/Content/filledStar.jpg" class="filledIcon" onclick="markUnimportant('@currentRow.UserID.ToString()',
                            '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()',
                            '@currentRow.WebRequestID.ToString()', '@currentRow.Message.ToString()',
                            '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()', '@currentRow.StackTrace.ToString()')" />
                    }
                </td>

                <!--
                     (at)if (currentRow.Important == null) //button to mark as important
                    {
                        <button class="openModalButton" onclick="openModal()">
                            Mark as important
                        </button>
                    }
                    else //button to unmark as important
                    {
                        <button class="markUnimportantButton" onclick="markUnimportant()">
                            Undo
                        </button>
                    }
                    -->

            </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}

<div class="reveal" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
    <form id="usernameForm">
        Your Email: <input type="text" name="usernameEntry" />
        <button onclick="UpdateImportance()">Update</button>
    </form>
    <button onclick="closeModal()">Cancel</button>
</div>

@section scripts
{
    <script language="javascript" type="text/javascript">
    var exampleModal;
    var exampleModalVisible = false;

    var currentUserID = null;
    var currentEmailAddress = null;
    var currentTimeStamp = null;
    var currentWebRequestID = null;
    var currentMessage = null;
    var currentMethodName = null;
    var currentSource = null;
    var currentStackTrace = null;

    function openModal(UserID, EmailAddress, TimeStamp, WebRequestID, Message, MethodName, Source, StackTrace) {
        event.preventDefault;

        currentUserID = UserID;
        currentEmailAddress = EmailAddress;
        currentTimeStamp = TimeStamp;
        currentWebRequestID = WebRequestID;
        currentMessage = Message;
        currentMethodName = MethodName;
        currentSource = Source;
        currentStackTrace = StackTrace;

        exampleModal.open();
    }

    function closeModal() {
        event.preventDefault;

        currentUserID = null;
        currentEmailAddress = null;
        currentTimeStamp = null;
        currentWebRequestID = null;
        currentMessage = null;
        currentMethodName = null;
        currentSource = null;
        currentStackTrace = null;

        exampleModal.close();
    }

    $(document).ready(function () {

        exampleModal = new Foundation.Reveal($("#example-modal"));

        $("#example-modal").on("open.zf.reveal", function () {
            exampleModalVisible = true;
        });

        $("#example-modal").on("closed.zf.reveal", function () {
            exampleModalVisible = false;
        });
    });

    function UpdateImportance() {
        usernameValue = $("[name=usernameEntry]").val();

        var model = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            Message: currentMessage,
            MethodName: currentMethodName,
            Source: currentSource,
            StackTrace: currentStackTrace
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("UpdateImportance", "LogException")",
            dataType: "json",
            data: {
                username: usernameValue,
                logToUpdate: model,
		    },

            success: function (result) {
                document.getElementById("usernameForm").reset();

                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMessage = null;
                currentMethodName = null;
                currentSource = null;
                currentStackTrace = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    };

    function markUnimportant(currentUserID, currentEmailAddress, currentTimeStamp, currentWebRequestID, currentMessage,
        currentMethodName, currentSource, currentStackTrace) {
        var model = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            Message: currentMessage,
            MethodName: currentMethodName,
            Source: currentSource,
            StackTrace: currentStackTrace
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("MarkUnimportant", "LogException")",
            dataType: "json",
            data: {
                logToUpdate: model,
            },

            success: function (result) {
                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMessage = null;
                currentMethodName = null;
                currentSource = null;
                currentStackTrace = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    }
    </script>
}
