
@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
@{
    var sortBy = Model.SortBy;
    var sortDir = Model.SortDirection;
    var id = Model.PageNumber;
    var searchDict = Model.SearchDictionary;

    var basicSearch = true;
    KeyValuePair<string,string> pair = new KeyValuePair<string, string>("Default", "");
    if (searchDict.Contains(pair))
    {
        basicSearch = false;
    } 

    List<String> categories = new List<String>() { "EmailAddress", "TimeStamp", "WebRequestID", "Message", "MethodName", "Source", "StackTrace", "Important" };

    bool noResults = (Model.TotalItems) == 0;

    List<SelectListItem> searchCategories = new List<SelectListItem>();
    searchCategories.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
    searchCategories.Add(new SelectListItem { Text = "Date (YYYY-MM-DD)", Value = "TimeStamp" });
    searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
    searchCategories.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    searchCategories.Add(new SelectListItem { Text = "Source", Value = "Source" });
    searchCategories.Add(new SelectListItem { Text = "Stack Trace", Value = "StackTrace" });
    searchCategories.Add(new SelectListItem { Text = "User who marked as important", Value = "UserImportant" });
}

<h3 class="tableTitle">Log Exception Table</h3>
<br />

<div class="container">
    <form name="searchForm">
        @Html.HiddenFor(m => m.SortBy)
        @Html.HiddenFor(m => m.SortDirection)

        <div class="block myblock">
            @Html.Label("Search by: ", new { @class = "mylabel" })
            @Html.DropDownList("searchBy", searchCategories, new { @class = "mydropdown" })
        </div>
        <div class="block myblock">
            @Html.Label("Search for: ", new { @class = "mylabel" })
            @Html.TextBox("searchInput", null, new { @class = "mytextbox" })
        </div>
        <button type="button" id="searchSubmit" name="searchSubmit" class="btn btn-default mybutton">Search</button>

        <button type="button" id="undoButton" class="btn btn-default undosearchButton" onclick="undoSearch('@sortBy', '@sortDir', 1)">Undo search</button>

        @Html.ActionLink("Advanced Search", "AdvancedSearch", "LogException")
    </form>
</div>

<br />

<div class="container">
    <div class="row">
        <div class="col-md-2">
            <label class="pageLabel">Page: @Model.PageNumber / @Model.TotalPages</label>
        </div>
        <div class="col-md-2">
            <h5>@Model.TotalItems total results</h5>
        </div>
        <div class="col-md-4">
            <div class="btn-group">
                <button type="button" class="btn btn-default" onclick="updateButton(1, '@sortBy', '@sortDir')">&laquo; First</button>

                <button type="button" class="btn btn-default" onclick="updateButton(((@id - 1) != 0) ? (@id - 1) : @id, '@sortBy', '@sortDir')">&lsaquo; Previous</button>

                <button type="button" class="btn btn-default" onClick="updateButton(((@id + 1) <= @Model.TotalPages) ? (@id + 1) : @id, '@sortBy', '@sortDir')">Next &rsaquo;</button>

                <button type="button" class="btn btn-default" onclick="updateButton(@Model.TotalPages, '@sortBy', '@sortDir')">Last &raquo;</button>
            </div>
        </div>
        <div class="col-md-4">
            <form name="pageJump">
                @Html.HiddenFor(m => m.SortBy)
                @Html.HiddenFor(m => m.SortDirection)

                <div class="block">
                    @Html.Label("Page: ", new { @class = "mylabel" })
                </div>
                <div class="block pageinputbox">
                    @Html.TextBox("id")
                </div>
                <button type="button" id="btnSubmit" class="btn btn-default">Jump to page</button>
            </form>
        </div>
    </div>
</div>    

@if (!noResults)
{
    <table class="mytable">
        <thead>
            <tr>
                @foreach (String category in categories)
                {
                    var sortB = "";
                    var sortD = "";
                    var className = "sortLink";

                    if (sortBy == category)
                    {
                        sortB = sortBy;
                        className = "selectedSortLink";

                        if (sortDir == "ASC")
                        { sortD = "DESC"; }
                        else
                        { sortD = "ASC"; }
                    }
                    else
                    {
                        sortB = category;
                        sortD = "ASC";
                    }
                    <td>
                        <button type="button" id="sortButton" onclick="updateButton(1, '@sortB', '@sortD')" class="@className">@category</button>                    
                    </td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
            {
                <tr>
                    <td>@currentRow.EmailAddress</td>
                    <td>@currentRow.TimeStamp</td>
                    <td>@currentRow.WebRequestID</td>
                    <td>@currentRow.Message</td>
                    <td>@currentRow.MethodName</td>
                    <td>@currentRow.Source</td>
                    <td>
                        @currentRow.StackTrace
                        @if (currentRow.StackTrace.Contains('\n') || (currentRow.StackTrace.Length >= 40))
                            {<br /> <img src="~/Content/ellipsis-button.png" class="ellipsisButton" onclick="openEllipsis(`@currentRow.StackTrace`);" />}
                    </td>
                    <td>
                        @if (currentRow.Important == null)
                        {
                            <img src="~/Content/unfilledStar.png" class="unfilledIcon" onclick="openModal('@currentRow.UserID.ToString()', '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()', '@currentRow.WebRequestID.ToString()', '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()')" />
                        }
                        else
                        {
                            <img src="~/Content/filledStar.png" class="filledIcon" onclick="markUnimportant('@currentRow.UserID.ToString()', '@currentRow.EmailAddress.ToString()', '@currentRow.TimeStamp.ToString()', '@currentRow.WebRequestID.ToString()', '@currentRow.MethodName.ToString()', '@currentRow.Source.ToString()')" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}

<div class="reveal tiny" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
    <button type="button" class="close" aria-label="Close" onclick="closeModal()">
        <span aria-hidden="true">&times;</span>
    </button>

    <form id="usernameForm">
        Your Email: <input type="text" name="usernameEntry" />
    </form>

    <button class="modalButton" onclick="UpdateImportance(@id, '@sortBy', '@sortDir')">Update</button>
    <!-- <button class="modalButton" onclick="closeModal()">Cancel</button> -->
</div>

<div class="reveal large" id="ellipsis-modal" data-close-on-click>
    <button type="button" class="close" aria-label="Close" onclick="closeEllipsis()">
        <span aria-hidden="true">&times;</span>
    </button>
    <div id="ellipsisContent"> </div>
</div>


@section scripts
{
<script language="javascript" type="text/javascript">
    var exampleModal;
    var exampleModalVisible = false;

    var ellipsisModal;
    var ellipsisModalVisible = false;
    var currentStackTrace;

    var currentUserID = null;
    var currentEmailAddress = null;
    var currentTimeStamp = null;
    var currentWebRequestID = null;
    var currentMethodName = null;
    var currentSource = null;

    var currentsearchDictionary = @Html.Raw(Json.Encode(searchDict));
    var currentid = null;
    var currentsortBy = null;
    var currentsortDir = null;
    var currentsearchBy = null;
    var currentsearchInput = null;

    var currentbasicSearch = '@basicSearch';

    function openModal(UserID, EmailAddress, TimeStamp, WebRequestID, MethodName, Source) {
        event.preventDefault;

        currentUserID = UserID;
        currentEmailAddress = EmailAddress;
        currentTimeStamp = TimeStamp;
        currentWebRequestID = WebRequestID;
        currentMethodName = MethodName;
        currentSource = Source;

        exampleModal.open();
    }

    function closeModal() {
        event.preventDefault;

        currentUserID = null;
        currentEmailAddress = null;
        currentTimeStamp = null;
        currentWebRequestID = null;
        currentMethodName = null;
        currentSource = null;

        exampleModal.close();
    }

    function openEllipsis(StackTrace) {
        event.preventDefault;
        currentStackTrace = StackTrace;
        $("#ellipsisContent").html(currentStackTrace); //writing the stack trace into a div in the modal
        ellipsisModal.open();
    }

    function closeEllipsis() {
        //event.preventDefault;
        currentStackTrace = null;
        ellipsisModal.close();
    }

    $(document).ready(function () {

        exampleModal = new Foundation.Reveal($("#example-modal"));
        $("#example-modal").on("open.zf.reveal", function () {
            exampleModalVisible = true;
        });
        $("#example-modal").on("closed.zf.reveal", function () {
            exampleModalVisible = false;
        });

        ellipsisModal = new Foundation.Reveal($("#ellipsis-modal"));
        $("#ellipsis-modal").on("open.zf.reveal", function () {
            ellipsisModalVisible = true;
        });
        $("#ellipsis-modal").on("closed.zf.reveal", function () {
            ellipsisModalVisible = false;
        });

        $(window).keydown(function(event){ /* keep the page from submitting when user presses Enter */
            if(event.keyCode == 13) {
                event.preventDefault();
                return false;
            }
        });

        if (currentbasicSearch != 'True') {
            document.getElementById("undoButton").disabled = true;
        }
        else {
            document.getElementById("undoButton").disabled = false;
        }
    });

    function UpdateImportance(page, sortB, sortD) {
        currentid = page;
        currentsortBy = sortB;
        currentsortDir = sortD;
        usernameValue = $("[name=usernameEntry]").val();

        var model = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            MethodName: currentMethodName,
            Source: currentSource,
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("UpdateImportance", "LogException")",
            dataType: "json",
            data: {
                username: usernameValue,
                logToUpdate: model,
		    },

            success: function (result) {
                document.getElementById("usernameForm").reset();

                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMethodName = null;
                currentSource = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                    window.location.reload();
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    };

    function markUnimportant(currentUserID, currentEmailAddress, currentTimeStamp, currentWebRequestID, currentMethodName, currentSource) {
        var model = {
            UserID: currentUserID,
            EmailAddress: currentEmailAddress,
            TimeStamp: currentTimeStamp,
            WebRequestID: currentWebRequestID,
            MethodName: currentMethodName,
            Source: currentSource,
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("MarkUnimportant", "LogException")",
            dataType: "json",
            data: {
                logToUpdate: model,
            },

            success: function (result) {
                currentUserID = null;
                currentEmailAddress = null;
                currentTimeStamp = null;
                currentWebRequestID = null;
                currentMethodName = null;
                currentSource = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    };

    $("#btnSubmit").click(function () {
        var formData = $('form[name="pageJump"]').serializeArray();
        var sortBy = formData[0].value;
        var sortDirection = formData[1].value;
        var page;
        if (formData[2].value <= @Model.TotalPages) {
            page = formData[2].value;
        }
        else {
            page = @Model.PageNumber;
        }
        updateButton(page, sortBy, sortDirection, "", "");
    });

    $("#searchSubmit").click(function () {
        var formData = $('form[name="searchForm"]').serializeArray();
        var sortBy = formData[0].value;
        var sortDirection = formData[1].value;
        var searchBy = formData[2].value;
        var searchInput = formData[3].value;

        updateButton(1, sortBy, sortDirection, searchBy, searchInput);
    });

    function undoSearch(sortby, sortdir, page) {
        var sortBy = sortby;
        var sortDirection = sortdir;
        var page = page;

        updateButton(page, sortBy, sortDirection, "Undo", ""); 
    }

    function updateButton(page, sortB, sortD, searchB, searchI) {
        currentid = page;
        currentsortBy = sortB;
        currentsortDir = sortD;
        currentsearchBy = searchB;
        currentsearchInput = searchI;

        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/LogException/Index';

        var dictionary = {};
        var index = 0;

        var newSearch = ((currentsearchInput != undefined) && (currentsearchInput != ""));

        var undoSearch = (currentsearchBy == "Undo");
        if (undoSearch) {
            dictionary["searchDictionary[0].Key"] = "Default";
            dictionary["searchDictionary[0].Value"] = "";
        }
        else {
            //if it's a new search, add new search inputs
            //if not a new search, add old search inputs 
            if (newSearch) {
                dictionary["searchDictionary[0].Key"] = currentsearchBy;
                dictionary["searchDictionary[0].Value"] = currentsearchInput;
            }
            else {
                for (var key in currentsearchDictionary) {
                    if (currentsearchDictionary.hasOwnProperty(key)) {
                        dictionary["searchDictionary[" + index + "].Key"] = key;
                        dictionary["searchDictionary[" + index + "].Value"] = currentsearchDictionary[key];
                    }
                    index = index + 1;
                }
            }
        }

        for (var key in dictionary) {
            const hiddenField = document.createElement('input');
            hiddenField.hidden = true;
            hiddenField.name = key;
            hiddenField.value = dictionary[key];
            form.appendChild(hiddenField);
        }

        const id = document.createElement('input');
        id.hidden = true;
        id.name = 'id';
        id.value = currentid;
        form.appendChild(id);

        const sortBy = document.createElement('input');
        sortBy.hidden = true;
        sortBy.name = 'sortBy';
        sortBy.value = currentsortBy;
        form.appendChild(sortBy);

        const sortDir = document.createElement('input');
        sortDir.hidden = true;
        sortDir.name = 'sortDir';
        sortDir.value = currentsortDir;
        form.appendChild(sortDir);

        document.body.appendChild(form);
        form.submit();
    };
    </script>
}
