@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@{
    var searchBy = Model.SearchBy;
    var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var id = Model.PageNumber;
}

<div>
    <!-- dropdown form to choose how to sort the data -->
    Sort data by:
    @{
        List<SelectListItem> listItems = new List<SelectListItem>();
        listItems.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp", Selected = ("TimeStamp" == Model.SortBy) });
        listItems.Add(new SelectListItem { Text = "Method Name", Value = "MethodName", Selected = ("MethodName" == Model.SortBy) });
    }

    @using (Html.BeginForm("Index", "LogException", FormMethod.Post, new { id = "sortby", @class = "form-control" }))
    {
        <!-- Figure out how to make search values stay in place when a different sort order is selected -->
        @Html.DropDownList("sortBy", listItems, new { onchange = "this.form.submit();" })
    }
</div>

@{ 
    List<SelectListItem> searchCategories = new List<SelectListItem>();
    searchCategories.Add(new SelectListItem { Text = "Time Stamp", Value = "TimeStamp" });
    searchCategories.Add(new SelectListItem { Text = "Email Address", Value = "EmailAddress" });
    searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
    searchCategories.Add(new SelectListItem { Text = "Method Name", Value = "MethodName" });
    searchCategories.Add(new SelectListItem { Text = "Source", Value = "Source" });
    searchCategories.Add(new SelectListItem { Text = "Stack Trace", Value = "StackTrace" });
}

<!-- Try to make searching by "contains" possible; also if there are no data in the query result, display "No results" -->
@using (Html.BeginRouteForm("Search", new { controller = "LogException", action = "Index" }))
{
    <div>
        @Html.Label("Search by: ")
        @Html.DropDownList("searchBy", searchCategories)
    </div>
    <div>
        @Html.Label("Search for: ")
        @Html.TextBox("searchInput")
    </div>
    <div>
        @Html.Label("Page: ")
        @Html.TextBox("id")
    </div>
    <input type="submit" name="btnSubmit" value="Go" class="btn btn-default" />
}

<div>
    @Html.ActionLink(linkText: "Previous",
                     actionName: "Index",
                     controllerName: "LogException",
                     routeValues: new { searchBy = searchBy, searchInput = searchInput, id = ((id - 1)!=0) ? (id-1) : id },
                     htmlAttributes: null)

    @Html.ActionLink(linkText: "Next",
                     actionName: "Index",
                     controllerName: "LogException",
                     routeValues: new { searchBy = searchBy, searchInput = searchInput, id = ((id + 1)<= Model.TotalPages) ? (id+1) : id },
                     htmlAttributes: null)
</div>

<div>
    Current Page: @Model.PageNumber/@Model.TotalPages
</div>


<table style="width:100%; text-align:center;">
    <thead>
        <tr>
            <td>Email Address</td>
            <td>Time Stamp</td>
            <td>Web Request ID</td>
            <td>Message</td>
            <td>Method Name</td>
            <td>Source</td>
            <td>Stack Trace</td>
        </tr>
    </thead>
    <tbody>
        @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
        {
            <tr>
                <td>@currentRow.EmailAddress</td>
                <td>@currentRow.TimeStamp</td>
                <td>@currentRow.WebRequestID</td>
                <td>@currentRow.Message</td>
                <td>@currentRow.MethodName</td>
                <td>@currentRow.Source</td>
                <td>@currentRow.StackTrace</td>
            </tr>
        }
    </tbody>
</table>

