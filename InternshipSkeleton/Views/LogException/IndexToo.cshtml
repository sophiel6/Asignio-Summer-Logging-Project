
@using AsignioInternship.Data.CombinedLogException
@using AsignioInternship.Data


@model PagedDataModelCollection<CombinedLogExceptionDataModel>
@{
    ViewBag.Title = "IndexToo";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
@{
    var searchBy = Model.SearchBy;
    var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var sortDir = Model.SortDirection;
    var id = Model.PageNumber;
    var searchDict = Model.SearchDictionary;

    List<String> categories = new List<String>() { "EmailAddress", "TimeStamp", "WebRequestID", "Message", "MethodName", "Source", "StackTrace", "Important" };

    bool noResults = (Model.TotalItems) == 0;
}



<!-- Paging stuff -->
<div class="container" style="padding-top: 50px !important;">
    <div class="row">
        <div class="col-md-4">
            <label class="pageLabel"> Current page: @Model.PageNumber / @Model.TotalPages</label>
        </div>
        <!-- 
        <div class="col-md-4">
            <div class="btn-group">
                Html.ActionLink(linkText: " << First",
                                actionName: "IndexToo",
                                controllerName: "LogException",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, id = 1, searchDictionary = searchDict },
                                htmlAttributes: new { class = "btn btn-default" })
                Html.ActionLink(linkText: "< Previous",
                                actionName: "IndexToo",
                                controllerName: "LogException",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, id = ((id - 1) != 0) ? (id - 1) : id, searchDictionary = searchDict },
                                htmlAttributes: new { class = "btn btn-default" })
                Html.ActionLink(linkText: "Next >",
                                actionName: "IndexToo",
                                controllerName: "LogException",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, id = ((id + 1) <= Model.TotalPages) ? (id + 1) : id, searchDictionary = searchDict },
                                htmlAttributes: new { class = "btn btn-default" })
                Html.ActionLink(linkText: "Last >>",
                                actionName: "IndexToo",
                                controllerName: "LogException",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, id = Model.TotalPages, searchDictionary = searchDict },
                                htmlAttributes: new { class = "btn btn-default" })
            </div>
        </div> -->
    </div>
</div>

<button type="button" onclick="pageButton(1, '@sortBy', '@sortDir')"> << First </button>

<button type="button" onclick="pageButton(((@id - 1) != 0) ? (@id - 1) : @id, '@sortBy', '@sortDir')"> < Previous </button>

<button type ="button" onClick ="pageButton(((@id + 1) <= @Model.TotalPages) ? (@id + 1) : @id, '@sortBy', '@sortDir')"> Next > </button>

<button type="button" onclick="pageButton(@Model.TotalPages, '@sortBy', '@sortDir')"> Last >> </button>


@if (!noResults)
{
    <table style="width:100%; text-align:center;">
        <thead>
            <tr>
                @foreach (String category in categories)
                {
                    var sortB = "";
                    var sortD = "";
                    var className = "";

                    if (sortBy == category)
                    {
                        sortB = sortBy;
                        className = "sortLink";<!-- If sortBy == the category name, make the link underlined -->

                        if (sortDir == "ASC")
                        { sortD = "DESC"; }
                        else
                        { sortD = "ASC"; }
                    }
                    else
                    {
                        sortB = category;
                        sortD = "ASC";
                    }
                    <td>
                        @Html.ActionLink(category, "IndexToo", new { sortBy = sortB, sortDir = sortD, searchBy = searchBy, searchInput = searchInput, id = 1 }, new { @class = className })
                    </td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (CombinedLogExceptionDataModel currentRow in Model.Items)
            {
                <tr>
                    <td>@currentRow.EmailAddress</td>
                    <td>@currentRow.TimeStamp</td>
                    <td>@currentRow.WebRequestID</td>
                    <td>@currentRow.Message</td>
                    <td>@currentRow.MethodName</td>
                    <td>@currentRow.Source</td>
                    <td>@currentRow.StackTrace</td>
                    <td>@currentRow.Important</td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}

<script>
    var currentid = null;
    var currentsortBy = null;
    var currentsortDir = null;
    var currentsearchDictionary = @Html.Raw(Json.Encode(searchDict))

    function pageButton(page, sortB, sortD) {
        currentid = page;
        currentsortBy = sortB;
        currentsortDir = sortD;
        debugger;

        const form = document.createElement('form');
        form.method = 'post';
        form.action = '/LogException/IndexToo';

        var dictionary = {};
        var index = 0;

        for (var key in currentsearchDictionary) {
            if (currentsearchDictionary.hasOwnProperty(key)) {
                dictionary["searchDictionary[" + index + "].Key"] = key;
                dictionary["searchDictionary[" + index + "].Value"] = currentsearchDictionary[key];
            }
            index = index + 1;
        }
        for (var key in dictionary) {
            const hiddenField = document.createElement('input');
            hiddenField.hidden = true;;
            hiddenField.name = key;
            hiddenField.value = dictionary[key];
            form.appendChild(hiddenField);
        }

        const id = document.createElement('input');
        id.hidden = true;
        id.name = 'id';
        id.value = currentid;
        form.appendChild(id);

        const sortBy = document.createElement('input');
        sortBy.hidden = true;
        sortBy.name = 'sortBy';
        sortBy.value = currentsortBy;
        form.appendChild(sortBy);

        const sortDir = document.createElement('input');
        sortDir.hidden = true;
        sortDir.name = 'sortDir';
        sortDir.value = currentsortDir;
        form.appendChild(sortDir);

        document.body.appendChild(form);
        form.submit();
    };
</script>
