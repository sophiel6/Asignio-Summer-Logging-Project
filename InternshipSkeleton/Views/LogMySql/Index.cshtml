@using AsignioInternship.Data.LogMySql
@using AsignioInternship.Data


@model PagedDataModelCollection<LogMySqlDataModel>
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.0/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.4.0/js/bootstrap.min.js"></script>
@{
    var searchBy = Model.SearchBy;
    var searchInput = Model.SearchInput;
    var sortBy = Model.SortBy;
    var sortDir = Model.SortDirection;
    var id = Model.PageNumber;

    List<String> categories = new List<String>() { "DateTimeStamp", "logmysql.Function", "Message", "Type", "Important" };

    bool noResults = (Model.TotalItems) == 0;

    List<SelectListItem> searchCategories = new List<SelectListItem>();
    searchCategories.Add(new SelectListItem { Text = "Message", Value = "Message" });
    searchCategories.Add(new SelectListItem { Text = "Type", Value = "Type" });
    searchCategories.Add(new SelectListItem { Text = "Function", Value = "Function" });
    searchCategories.Add(new SelectListItem { Text = "Importance", Value = "Important" });
}

<div class="container" style="padding-top: 50px !important;">
    @using (Html.BeginRouteForm("Search", new { controller = "LogMySql", action = "Index" }))
    {
        @Html.HiddenFor(m => m.SortBy)
        @Html.HiddenFor(m => m.SortDirection)

        <div class="block" style="width: 25% !important; display: inline-block; ">
            @Html.Label("Search by: ", new { @class = "mylabel" })
            @Html.DropDownList("searchBy", searchCategories, new { @class = "mydropdown" })
        </div>
        <div class="block" style="width: 25% !important; display: inline-block; ">
            @Html.Label("*Search for: ", new { @class = "mylabel" })
            @Html.TextBox("searchInput", null, new { @class = "mytextbox" })
        </div>
        <input type="submit" name="btnSubmit" value="Go" class="btn btn-default" style="width: 20% !important; display: inline-block;" />
        @Html.ActionLink(linkText: "Undo search",
        actionName: "Index",
        controllerName: "LogMySql",
        routeValues: new { sortBy = sortBy, sortDir = sortDir, searchBy = "", searchInput = "", id = 1 },
        htmlAttributes: new { @class = "btn btn-default" })
    }
</div>

<br />

<!-- Paging stuff -->
<div class="container">
    <div class="row">
        <div class="col-md-4">
            <label class="pageLabel"> Current page: @Model.PageNumber / @Model.TotalPages</label>
        </div>
        <div class="col-md-4">
            <div class="btn-group">
                @Html.ActionLink(linkText: " << First",
                                actionName: "Index",
                                controllerName: "LogMySql",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, searchBy = searchBy, searchInput = searchInput, id = 1 },
                                htmlAttributes: new { @class = "btn btn-default" })
                @Html.ActionLink(linkText: "< Previous",
                                actionName: "Index",
                                controllerName: "LogMySql",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, searchBy = searchBy, searchInput = searchInput, id = ((id - 1) != 0) ? (id - 1) : id },
                                htmlAttributes: new { @class = "btn btn-default" })
                @Html.ActionLink(linkText: "Next >",
                                actionName: "Index",
                                controllerName: "LogMySql",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, searchBy = searchBy, searchInput = searchInput, id = ((id + 1) <= Model.TotalPages) ? (id + 1) : id },
                                htmlAttributes: new { @class = "btn btn-default" })
                @Html.ActionLink(linkText: "Last >>",
                                actionName: "Index",
                                controllerName: "LogMySql",
                                routeValues: new { sortBy = sortBy, sortDir = sortDir, searchBy = searchBy, searchInput = searchInput, id = Model.TotalPages },
                                htmlAttributes: new { @class = "btn btn-default" })
            </div>
        </div>
        <div class="col-md-4">
            @using (Html.BeginRouteForm("Search", new { controller = "LogMySql", action = "Index" }))
            {
                @Html.HiddenFor(m => m.SortBy)
                @Html.HiddenFor(m => m.SortDirection)
                @Html.HiddenFor(m => m.SearchBy)
                @Html.HiddenFor(m => m.SearchInput)

                <div class="block">
                    @Html.Label("Page: ", new { @class = "mylabel" })
                </div>
                <div class="block">
                    @Html.TextBox("id", null, new { @class = "pageinputbox" })
                </div>
                <input type="submit" name="btnSubmit" value="Jump to page" class="btn btn-default" style="display: inline-block;" />
            }
        </div>
    </div>
</div>

@if (!noResults)
{
    <table style="width:100%; text-align:center;">
        <thead>
            <tr>
                @foreach (String category in categories)
                {
                    var sortB = "";
                    var sortD = "";
                    var className = "";

                    if (sortBy == category)
                    {
                        sortB = sortBy;
                        className = "sortLink";<!-- If sortBy == the category name, make the link underlined -->

                        if (sortDir == "ASC")
                        { sortD = "DESC"; }
                        else
                        { sortD = "ASC"; }
                    }
                    else
                    {
                        sortB = category;
                        sortD = "ASC";
                    }
                    <td>
                        @Html.ActionLink(category, "Index", new { sortBy = sortB, sortDir = sortD, searchBy = searchBy, searchInput = searchInput, id = 1 }, new { @class = className })
                    </td>
                }
            </tr>
        </thead>
        <tbody>
            @foreach (LogMySqlDataModel currentRow in Model.Items)
            {
            <tr>
                <td>@currentRow.DateTimeStamp</td>
                <td>@currentRow.Function</td>
                <td>@currentRow.Message</td>
                <td>@currentRow.Type</td>
                <td>
                    @if (currentRow.Important == null) //button to mark as important
                    {
                        string fixedMessage = currentRow.Message.ToString().Replace("'", "\\'");
                        <img src="~/Content/unfilledStar.jpg" class="unfilledIcon" onclick="openModal('@currentRow.DateTimeStamp.ToString()',
                            '@fixedMessage', '@currentRow.Function.ToString()','@currentRow.Type.ToString()')">
                    }
                    else //button to unmark as important
                    {
                        string fixedMessage = currentRow.Message.ToString().Replace("'", "\\'");
                        <img src="~/Content/filledStar.jpg" class="filledIcon" onclick="markUnimportant('@currentRow.DateTimeStamp.ToString()',
                            '@fixedMessage', '@currentRow.Function.ToString()','@currentRow.Type.ToString()')">
                    }
                </td>
            </tr>
            }
        </tbody>
    </table>
}
else
{
    <h2> No results found. </h2>
}

<div class="reveal" id="example-modal" data-close-on-click="true" data-animation-in="fade-in" data-animation-out="fade-out" style="display:none;">
    <form id="usernameForm">
        Your Email: <input type="text" name="usernameEntry" />
        <button onclick="UpdateImportance()">Update</button>
    </form>
    <button onclick="closeModal()">Cancel</button>
</div>

@section scripts
{
    <script language="javascript" type="text/javascript">
    var exampleModal;
    var exampleModalVisible = false;

    var currentDateTimeStamp = null;
    var currentMessage = null;
    var currentFunction = null;
    var currentType = null;

    function openModal(DateTimeStamp, Message, Function, Type) {
        event.preventDefault;

        currentDateTimeStamp = DateTimeStamp;
        currentMessage = Message;
        currentFunction = Function;
        currentType = Type;

        exampleModal.open();
    }

    function closeModal() {
        event.preventDefault;

        currentDateTimeStamp = null;
        currentMessage = null;
        currentFunction = null;
        currentType = null;

        exampleModal.close();
    }

    $(document).ready(function () {

        exampleModal = new Foundation.Reveal($("#example-modal"));

        $("#example-modal").on("open.zf.reveal", function () {
            exampleModalVisible = true;
        });

        $("#example-modal").on("closed.zf.reveal", function () {
            exampleModalVisible = false;
        });
    });

    function UpdateImportance() {
        usernameValue = $("[name=usernameEntry]").val();

        var model = {
            DateTimeStamp: currentDateTimeStamp,
            Message: currentMessage,
            Function: currentFunction,
            Type: currentType,
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("UpdateImportance", "LogMySql")",
            dataType: "json",
            data: {
                username: usernameValue,
                logToUpdate: model,
		    },

            success: function (result) {
                document.getElementById("usernameForm").reset();

                currentDateTimeStamp = null;
                currentMessage = null;
                currentFunction = null;
                currentType = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    };

    function markUnimportant(currentDateTimeStamp, currentMessage, currentFunction, currentType) {
        var model = {
            DateTimeStamp: currentDateTimeStamp,
            Message: currentMessage,
            Function: currentFunction,
            Type: currentType,
        };

        $.ajax({
            method: "POST",
            url: "@Url.Action("MarkUnimportant", "LogMySql")",
            dataType: "json",
            data: {
                logToUpdate: model,
            },
            success: function (result) {
                currentDateTimeStamp = null;
                currentMessage = null;
                currentFunction = null;
                currentType = null;

                if (result.IsCreated) {
                    window.location.reload();
                }
                else {
                    alert(result.ErrorMessage);
                }
            },

            error: function (result) {
                alert(result.ErrorMessage);
            }
        });
    }
    </script>
}